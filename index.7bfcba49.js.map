{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAQ,EAAM,KAAK,CAAC,IAAI,CAAC,EAAE,CAC3B,EAAQ,EAAM,OAAO,CAAC,EAAE,CACxB,EAAY,EAAM,OAAO,CAAC,EAAE,CAAC,IAAI,CAEvC,SAAS,EAAY,CAAS,EAG5B,MAAO,CAFU,EAAU,OAAO,CAAC,UAAW,GAGhD,CA6BA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,GAAI,AAAqB,OAArB,EAAE,MAAM,CAAC,OAAO,CAAW,CAC7B,IAAM,EAAY,EAAE,MAAM,CAAC,SAAS,CAAC,WAAW,GAC1C,EAAQ,EAAE,MAAM,CAAC,SAAS,CAC1B,EAAS,EAAE,CAEZ,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,CAAA,CAAA,OAAA,QAAA,CAAA,GAAb,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,EAAO,IAAI,CAAC,EAAI,KAAK,CAAC,EAAM,C,C,C,M,E,CADzB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAOL,AAFmB,AADE,AArCzB,CAAA,SAAyB,CAAM,CAAE,CAAS,EACxC,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,EAAmB,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,EAAA,I,A,W,M,A,U,wI,IAEzB,OAAQ,GACN,IAAK,OACL,IAAK,WACH,EAAa,IAAI,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,OAAO,EAAI,SAAS,CAAC,aAAa,CAAC,EAAI,SAAS,CAClD,GACA,KAEF,KAAK,MACH,EAAa,IAAI,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,MAAO,CAAC,EAAI,SAAS,CAAG,CAAC,EAAI,SAAS,AACxC,GACA,KAEF,KAAK,SACH,EAAa,IAAI,CAAC,SAAC,CAAA,CAAK,CAAxB,EACE,OAAO,EAAY,EAAI,SAAS,EAAI,EAAY,EAAI,SAAS,CAC/D,EAEJ,CAEA,OAAO,CACT,CAAA,EAYyC,EAAQ,GACb,GAAG,CAAC,SAAC,CAArC,EAA4C,OAAA,EAAG,OAAO,CAAC,K,GAE5C,OAAO,CAAC,SAAC,CAApB,EAA2B,OAAA,EAAM,MAAM,CAAC,E,EAC1C,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\nvar tHead = table.tHead.rows[0];\nvar tBody = table.tBodies[0];\nvar tBodyRows = table.tBodies[0].rows;\nfunction parseSalary(numberStr) {\n    var cleanStr = numberStr.replace(/[^0-9]/g, \"\");\n    return +cleanStr;\n}\nfunction sortTableColumn(column, sortField) {\n    var sortedColumn = _to_consumable_array(column);\n    switch(sortField){\n        case \"name\":\n        case \"position\":\n            sortedColumn.sort(function(td1, td2) {\n                return td1.innerText.localeCompare(td2.innerText);\n            });\n            break;\n        case \"age\":\n            sortedColumn.sort(function(td1, td2) {\n                return +td1.innerText - +td2.innerText;\n            });\n            break;\n        case \"salary\":\n            sortedColumn.sort(function(td1, td2) {\n                return parseSalary(td1.innerText) - parseSalary(td2.innerText);\n            });\n    }\n    return sortedColumn;\n}\ntHead.addEventListener(\"click\", function(e) {\n    if (e.target.tagName === \"TH\") {\n        var sortField = e.target.innerText.toLowerCase();\n        var index = e.target.cellIndex;\n        var column = [];\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = tBodyRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                column.push(row.cells[index]);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var sortedColumn = sortTableColumn(column, sortField);\n        var sortedRows = sortedColumn.map(function(td) {\n            return td.closest(\"tr\");\n        });\n        sortedRows.forEach(function(tr) {\n            return tBody.append(tr);\n        });\n    }\n});\n\n//# sourceMappingURL=index.7bfcba49.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nconst tHead = table.tHead.rows[0];\nconst tBody = table.tBodies[0];\nconst tBodyRows = table.tBodies[0].rows;\n\nfunction parseSalary(numberStr) {\n  const cleanStr = numberStr.replace(/[^0-9]/g, '');\n\n  return +cleanStr;\n}\n\nfunction sortTableColumn(column, sortField) {\n  const sortedColumn = [...column];\n\n  switch (sortField) {\n    case 'name':\n    case 'position':\n      sortedColumn.sort((td1, td2) => {\n        return td1.innerText.localeCompare(td2.innerText);\n      });\n      break;\n\n    case 'age':\n      sortedColumn.sort((td1, td2) => {\n        return +td1.innerText - +td2.innerText;\n      });\n      break;\n\n    case 'salary': {\n      sortedColumn.sort((td1, td2) => {\n        return parseSalary(td1.innerText) - parseSalary(td2.innerText);\n      });\n    }\n  }\n\n  return sortedColumn;\n}\n\ntHead.addEventListener('click', (e) => {\n  if (e.target.tagName === 'TH') {\n    const sortField = e.target.innerText.toLowerCase();\n    const index = e.target.cellIndex;\n    const column = [];\n\n    for (const row of tBodyRows) {\n      column.push(row.cells[index]);\n    }\n\n    const sortedColumn = sortTableColumn(column, sortField);\n    const sortedRows = sortedColumn.map((td) => td.closest('tr'));\n\n    sortedRows.forEach((tr) => tBody.append(tr));\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","tHead","rows","tBody","tBodies","tBodyRows","parseSalary","numberStr","replace","addEventListener","e","target","tagName","sortField","innerText","toLowerCase","index","cellIndex","column","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","push","cells","err","return","sortedRows","sortedColumn","sortTableColumn","_array_without_holes","isArray","_iterable_to_array","iter","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sort","td1","td2","localeCompare","map","td","closest","forEach","tr","append"],"version":3,"file":"index.7bfcba49.js.map"}